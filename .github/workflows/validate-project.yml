name: 📋 Project Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  validate-structure:
    name: 🔍 Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Validate required files
      run: |
        echo "Checking for required project files..."
        
        # Core Add-on files
        files=(
          "appsscript.json"
          "coordinator.js"
          "utilities.js"
          "ga4.js"
          "gtm.js"
          "looker_studio.js"
          "logging.js"
          "dashboard.js"
          "configuration.html"
        )
        
        missing_files=()
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
            echo "❌ Missing: $file"
          else
            echo "✅ Found: $file"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "Missing required files: ${missing_files[*]}"
          exit 1
        fi
        
        echo "✅ All required files present!"
        
    - name: 📖 Validate documentation structure
      run: |
        echo "Checking documentation structure..."
        
        docs=(
          "README.md"
          "CONTRIBUTING.md"
          "CHANGELOG.md"
          "LICENSE"
          "SECURITY.md"
          "CODE_OF_CONDUCT.md"
        )
        
        for doc in "${docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "⚠️ Missing documentation: $doc"
          else
            echo "✅ Found: $doc"
          fi
        done
        
    - name: 🔧 Validate GitHub templates
      run: |
        echo "Checking GitHub configuration..."
        
        github_files=(
          ".github/ISSUE_TEMPLATE/bug_report.md"
          ".github/ISSUE_TEMPLATE/feature_request.md"
          ".github/ISSUE_TEMPLATE/configuration_help.md"
          ".github/PULL_REQUEST_TEMPLATE.md"
          ".github/FUNDING.yml"
        )
        
        for file in "${github_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "⚠️ Missing GitHub template: $file"
          else
            echo "✅ Found: $file"
          fi
        done

  validate-appsscript:
    name: 🔍 Validate Apps Script Manifest
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check appsscript.json syntax
      run: |
        echo "Validating appsscript.json..."
        if jq empty appsscript.json; then
          echo "✅ appsscript.json is valid JSON"
        else
          echo "❌ appsscript.json has invalid JSON syntax"
          exit 1
        fi
        
    - name: 🔍 Check required manifest fields
      run: |
        echo "Checking required appsscript.json fields..."
        
        required_fields=("timeZone" "dependencies" "webapp" "oauthScopes")
        
        for field in "${required_fields[@]}"; do
          if jq -e ".$field" appsscript.json > /dev/null; then
            echo "✅ Found required field: $field"
          else
            echo "❌ Missing required field: $field"
            exit 1
          fi
        done
        
  validate-readme:
    name: 📖 Validate README Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check README.md structure
      run: |
        echo "Validating README.md structure..."
        
        required_sections=(
          "Key Features"
          "Installation"
          "Quick Start"
          "License"
          "Contributing"
        )
        
        for section in "${required_sections[@]}"; do
          if grep -qi "$section" README.md; then
            echo "✅ Found section: $section"
          else
            echo "⚠️ Missing or incomplete section: $section"
          fi
        done
        
    - name: 🔗 Check for broken relative links
      run: |
        echo "Checking for broken relative links in README.md..."
        
        # Extract relative links from README.md
        relative_links=$(grep -oP '\[.*?\]\(\K[^)]*(?=\))' README.md | grep -v '^http' | grep -v '^mailto:' || true)
        
        if [ -z "$relative_links" ]; then
          echo "✅ No relative links to check"
          exit 0
        fi
        
        broken_links=()
        while IFS= read -r link; do
          if [ ! -f "$link" ] && [ ! -d "$link" ]; then
            broken_links+=("$link")
            echo "❌ Broken link: $link"
          else
            echo "✅ Valid link: $link"
          fi
        done <<< "$relative_links"
        
        if [ ${#broken_links[@]} -ne 0 ]; then
          echo "Found broken relative links in README.md"
          exit 1
        fi

  validate-licenses:
    name: 📄 Validate License Information
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Check license consistency
      run: |
        echo "Checking license consistency..."
        
        # Check if LICENSE file exists and contains CC BY-NC-SA 4.0
        if [ ! -f "LICENSE" ]; then
          echo "❌ LICENSE file not found"
          exit 1
        fi
        
        if grep -qi "CC BY-NC-SA 4.0\|Creative Commons Attribution-NonCommercial-ShareAlike 4.0" LICENSE; then
          echo "✅ LICENSE file contains correct license"
        else
          echo "❌ LICENSE file doesn't contain expected CC BY-NC-SA 4.0 license"
          exit 1
        fi
        
        # Check if README.md mentions the correct license
        if grep -qi "CC BY-NC-SA 4.0\|Creative Commons Attribution-NonCommercial-ShareAlike 4.0" README.md; then
          echo "✅ README.md mentions correct license"
        else
          echo "❌ README.md doesn't mention expected license"
          exit 1
        fi
