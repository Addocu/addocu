name: üìã Smart Project Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  validate-core-files:
    name: üîç Validate Core Add-on Files
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîç Check essential Add-on files
      run: |
        echo "Checking for essential Add-on files..."
        
        # Core Add-on files (flexible approach)
        essential_files=(
          "appsscript.json"
          "coordinator.js"
          "utilities.js"
        )
        
        # Optional but expected files
        expected_files=(
          "ga4.js"
          "gtm.js"
          "looker_studio.js"
          "logging.js"
          "dashboard.js"
          "configuration.html"
        )
        
        missing_essential=()
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_essential+=("$file")
            echo "‚ùå Missing essential: $file"
          else
            echo "‚úÖ Found essential: $file"
          fi
        done
        
        if [ ${#missing_essential[@]} -ne 0 ]; then
          echo "‚ùå Missing essential files: ${missing_essential[*]}"
          exit 1
        fi
        
        # Check optional files (warnings only)
        missing_optional=()
        for file in "${expected_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_optional+=("$file")
            echo "‚ö†Ô∏è Missing optional: $file"
          else
            echo "‚úÖ Found: $file"
          fi
        done
        
        if [ ${#missing_optional[@]} -ne 0 ]; then
          echo "‚ö†Ô∏è Consider adding: ${missing_optional[*]}"
        fi
        
        echo "‚úÖ Core validation passed!"

  validate-appsscript-smart:
    name: üîç Smart Apps Script Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîç Validate appsscript.json syntax
      run: |
        echo "Validating appsscript.json syntax..."
        if jq empty appsscript.json 2>/dev/null; then
          echo "‚úÖ appsscript.json is valid JSON"
        else
          echo "‚ùå appsscript.json has invalid JSON syntax"
          cat appsscript.json
          exit 1
        fi
        
    - name: üîç Check basic manifest structure
      run: |
        echo "Checking basic appsscript.json structure..."
        
        # Only check truly essential fields
        if jq -e '.timeZone' appsscript.json > /dev/null 2>&1; then
          echo "‚úÖ Has timeZone"
        else
          echo "‚ö†Ô∏è Missing timeZone (recommended)"
        fi
        
        if jq -e '.dependencies' appsscript.json > /dev/null 2>&1; then
          echo "‚úÖ Has dependencies"
        else
          echo "‚ö†Ô∏è Missing dependencies section"
        fi
        
        # Check if it has OAuth scopes (flexible)
        if jq -e '.oauthScopes' appsscript.json > /dev/null 2>&1; then
          echo "‚úÖ Has OAuth scopes"
        elif jq -e '.dependencies.enabledAdvancedServices' appsscript.json > /dev/null 2>&1; then
          echo "‚úÖ Has advanced services (OAuth implied)"
        else
          echo "‚ö†Ô∏è No explicit OAuth configuration found"
        fi
        
        echo "‚úÖ Basic manifest structure is valid"

  validate-documentation:
    name: üìñ Smart Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîç Check essential documentation
      run: |
        echo "Checking for essential documentation..."
        
        # Essential docs
        essential_docs=("README.md" "LICENSE")
        # Recommended docs  
        recommended_docs=("CONTRIBUTING.md" "CHANGELOG.md" "SECURITY.md")
        
        missing_essential=()
        for doc in "${essential_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            missing_essential+=("$doc")
            echo "‚ùå Missing essential: $doc"
          else
            echo "‚úÖ Found essential: $doc"
          fi
        done
        
        if [ ${#missing_essential[@]} -ne 0 ]; then
          echo "‚ùå Missing essential documentation: ${missing_essential[*]}"
          exit 1
        fi
        
        # Check recommended (warnings only)
        for doc in "${recommended_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ö†Ô∏è Consider adding: $doc"
          else
            echo "‚úÖ Found recommended: $doc"
          fi
        done
        
    - name: üîç Validate README content (flexible)
      run: |
        echo "Checking README.md content..."
        
        # Flexible section checking (case-insensitive, partial matches)
        sections_found=0
        
        if grep -qi -E "(feature|functionality|what.*do)" README.md; then
          echo "‚úÖ Found features/functionality section"
          ((sections_found++))
        fi
        
        if grep -qi -E "(install|setup|getting.*start|quick.*start)" README.md; then
          echo "‚úÖ Found installation/setup section"
          ((sections_found++))
        fi
        
        if grep -qi -E "(licen|legal|term)" README.md; then
          echo "‚úÖ Found license section"
          ((sections_found++))
        fi
        
        if grep -qi -E "(contribut|help|develop)" README.md; then
          echo "‚úÖ Found contributing section"
          ((sections_found++))
        fi
        
        if grep -qi -E "(support|help|contact|issue)" README.md; then
          echo "‚úÖ Found support section"
          ((sections_found++))
        fi
        
        echo "Found $sections_found/5 expected content areas"
        
        if [ $sections_found -ge 3 ]; then
          echo "‚úÖ README.md has sufficient content"
        else
          echo "‚ö†Ô∏è README.md could benefit from more structured content"
        fi

  validate-github-config:
    name: üîß GitHub Configuration Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîç Check GitHub templates (optional)
      run: |
        echo "Checking GitHub configuration..."
        
        github_files=(
          ".github/ISSUE_TEMPLATE/bug_report.md:Bug report template"
          ".github/ISSUE_TEMPLATE/feature_request.md:Feature request template"
          ".github/PULL_REQUEST_TEMPLATE.md:Pull request template"
          ".github/FUNDING.yml:Funding configuration"
        )
        
        found_templates=0
        total_templates=${#github_files[@]}
        
        for item in "${github_files[@]}"; do
          file="${item%%:*}"
          description="${item##*:}"
          
          if [ -f "$file" ]; then
            echo "‚úÖ Found: $description"
            ((found_templates++))
          else
            echo "‚ö†Ô∏è Missing: $description"
          fi
        done
        
        echo "Found $found_templates/$total_templates GitHub templates"
        
        if [ $found_templates -ge 2 ]; then
          echo "‚úÖ Sufficient GitHub configuration"
        else
          echo "‚ö†Ô∏è Consider adding more GitHub templates for better community management"
        fi

  validate-license-smart:
    name: üìÑ Smart License Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîç Check license presence and type
      run: |
        echo "Checking license information..."
        
        if [ ! -f "LICENSE" ]; then
          echo "‚ùå LICENSE file not found"
          exit 1
        fi
        
        # Flexible license checking
        if grep -qi -E "(creative.*commons|cc.*by.*nc.*sa|non.*commercial.*share.*alike)" LICENSE; then
          echo "‚úÖ Found Creative Commons Non-Commercial license"
        elif grep -qi -E "(mit|apache|gpl|bsd)" LICENSE; then
          echo "‚úÖ Found open source license"
          echo "‚ö†Ô∏è Note: Project documentation suggests CC BY-NC-SA 4.0"
        else
          echo "‚ö†Ô∏è License type not clearly identified"
        fi
        
        # Check README mentions license (flexible)
        if grep -qi -E "(licen|legal|terms.*use)" README.md; then
          echo "‚úÖ README.md mentions licensing"
        else
          echo "‚ö†Ô∏è Consider adding license information to README.md"
        fi
        
        echo "‚úÖ License validation completed"

  project-health-summary:
    name: üìä Project Health Summary
    runs-on: ubuntu-latest
    needs: [validate-core-files, validate-appsscript-smart, validate-documentation, validate-github-config, validate-license-smart]
    if: always()
    
    steps:
    - name: üìä Generate project health report
      run: |
        echo "üéØ Project Health Summary"
        echo "========================"
        echo ""
        echo "Core Files: ${{ needs.validate-core-files.result }}"
        echo "Apps Script Manifest: ${{ needs.validate-appsscript-smart.result }}"
        echo "Documentation: ${{ needs.validate-documentation.result }}"  
        echo "GitHub Config: ${{ needs.validate-github-config.result }}"
        echo "License: ${{ needs.validate-license-smart.result }}"
        echo ""
        
        if [[ "${{ needs.validate-core-files.result }}" == "success" && 
              "${{ needs.validate-appsscript-smart.result }}" == "success" && 
              "${{ needs.validate-documentation.result }}" == "success" && 
              "${{ needs.validate-license-smart.result }}" == "success" ]]; then
          echo "‚úÖ Project structure is healthy!"
          echo "üöÄ Ready for community contributions"
        else
          echo "‚ö†Ô∏è Some validations had issues - check logs above"
          echo "üí° Most issues are recommendations, not blockers"
        fi
